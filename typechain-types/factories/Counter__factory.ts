/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "CountedTo",
    type: "event",
  },
  {
    inputs: [],
    name: "countDown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countUp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b50610ba8806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630bd8599e146100465780635fcbd5b614610064578063a87d942c14610082575b600080fd5b61004e6100a0565b60405161005b91906109e2565b60405180910390f35b61006c610417565b60405161007991906109e2565b60405180910390f35b61008a61078e565b60405161009791906109e2565b60405180910390f35b60006100ce7f20524cc53469f63f7f96c6014a6da13c63632a8d19d3898a15509ee03575e44660001b61081c565b6100fa7f79e98628b07262fa602ec1dfad21e4cdb00fae73858f8bef11bceaafdaeb133460001b61081c565b6101267f4ea952f314fbe5d66409701f34157ad7090939b428445cf857285f555fbf013760001b61081c565b6101676040518060400160405280601081526020017f636f756e7455703a20636f756e74203d0000000000000000000000000000000081525060005461081f565b6101937f9042c9e6e7dfac701fd1c58b2d05bfc82e7b3810efc89a730a80e892370815fb60001b61081c565b6101bf7fad941ccea41d7ba9d662e79d9ba0669e505aee9baec4be711f0bed9d50735b2e60001b61081c565b600060016000546101d09190610a19565b90506101fe7f9fc4ece2ef08e6bba30327a718b48c189014f7775d80148bb88e48c21e2ffd5c60001b61081c565b61022a7fbf5b7218f2c0af08dda50486da9bb8f15c3aee271f4ab1ec00f9c94435bf322e60001b61081c565b6102567f09ce031f8b0ee0cd7155a331efefae3bf43da3f5ef776c5dba6f21fb0ac17fa560001b61081c565b600054811161029a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610291906109c2565b60405180910390fd5b6102c67f98e923093a7f2930d8d18e7d96a1c9d9acff3f8dd7f8d884c145815b81b7651560001b61081c565b6102f27f07cd90ff1b5832e3bcb46d8dca82318f5299318419d2b1d33d6ada0b33ecd23460001b61081c565b61031e7f0f02d838118e4dc5f1249c765b39fe334b28b80a38f6adab1390f17a8bc9d64260001b61081c565b806000819055506103517f0f82400f7aceffb723ab1128bb8d62283520b1d9d1efdb3b01d3e4ca496a092b60001b61081c565b61037d7fd0df98d13b9f1bc15a782a8913cace7fc16668809fa4faa208226295538c2bf060001b61081c565b7fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e676000546040516103ae91906109e2565b60405180910390a16103e27f95078ac05cceb4ff101ac1ee159f2956e2cd1ba3202ca0c6d0f25a2dbe482b7060001b61081c565b61040e7f1efb838f3c8cbdc70c5c51db352c9cce80863b78762d4f5f56ea69b8af82aa5560001b61081c565b60005491505090565b60006104457f094bb0d6b09ccad7b1856dcecc922083d6966686c0674685b9904c242be0649960001b61081c565b6104717fbd02b8f6c58474c0dc8f6c1bee73d420ba11d0c78cbe63f44f5a4e3e418d6ee860001b61081c565b61049d7f7a8e18e13f7d246c696bc90e2aa2cc4c3fbcc0f8a16b4c5ea4c7b23d0146de2f60001b61081c565b6104de6040518060400160405280601281526020017f636f756e74446f776e3a20636f756e74203d000000000000000000000000000081525060005461081f565b61050a7fdb9fc45064e3ef245890661c04a2478b4f5d19c73fd3c12b762ef8eac8cd680160001b61081c565b6105367f76e29eab63b941529d77f24e32e1ffc2f57a1b8b5254403affb4459e8cd26f1360001b61081c565b600060016000546105479190610a6f565b90506105757fea03b87b86344bc159604459539c1e5dde683f63a07092a60808a9a9f80f526660001b61081c565b6105a17f8a84b50bf0d07d6b3c0074b48b7df6a2904f7e65c8f06148682b701c7c91648360001b61081c565b6105cd7f5d2e22ce71560238f550571ac32635c8fe1d4731d2f46931cbab60b8352624ef60001b61081c565b6000548110610611576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610608906109a2565b60405180910390fd5b61063d7f52c03708abc6c56e5a506af46110a18ee98b525ff61cae9be14068ad232f049c60001b61081c565b6106697fe4ea969e9791a8d5a9f96df55509a68703671b11895331a979963ff856ebdda260001b61081c565b6106957ff1ac38f0d194c67a124703e43727651ab658e773709a87cbf185290b352cad4960001b61081c565b806000819055506106c87fdebd1db2997ecbd27a40b8ebca9e156ff15b04ee9a6a918a2aa996ad109c2e8060001b61081c565b6106f47f0464037d2caefd10517b903507debc9502356572c4e4ba0f8b930043d5a90fc160001b61081c565b7fa501f5a8ef1a812bff54fb3642cfaec066c351af1716c48a7bdd05e0bb631e6760005460405161072591906109e2565b60405180910390a16107597f97e97f444607408e829f433c0ef8a51f7882d31a9f412442727c43bd2692d7d260001b61081c565b6107857f19b1f8cd0130d1ca02b0a97143f7010b8774f1f4bb3de18259c4be0d38c090fe60001b61081c565b60005491505090565b60006107bc7faa45a01dbcfbf2ace465346958eb76bdc1d7cc6e7d7114fc89ac75690e7edda160001b61081c565b6107e87fd0515e9fe17d7d23ef7d227d350161cf7d7b316cbe3740c4d43cf3061634f92d60001b61081c565b6108147f240f8f41b33a54d7a4508ee164391c4a85e82f53d7cced022b43c32559d33bb260001b61081c565b600054905090565b50565b6108b78282604051602401610835929190610972565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108bb565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b60006108ef826109fd565b6108f98185610a08565b9350610909818560208601610aad565b61091281610b0f565b840191505092915050565b600061092a601183610a08565b915061093582610b20565b602082019050919050565b600061094d601083610a08565b915061095882610b49565b602082019050919050565b61096c81610aa3565b82525050565b6000604082019050818103600083015261098c81856108e4565b905061099b6020830184610963565b9392505050565b600060208201905081810360008301526109bb8161091d565b9050919050565b600060208201905081810360008301526109db81610940565b9050919050565b60006020820190506109f76000830184610963565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610a2482610aa3565b9150610a2f83610aa3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a6457610a63610ae0565b5b828201905092915050565b6000610a7a82610aa3565b9150610a8583610aa3565b925082821015610a9857610a97610ae0565b5b828203905092915050565b6000819050919050565b60005b83811015610acb578082015181840152602081019050610ab0565b83811115610ada576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f55696e7432353620756e646572666c6f77000000000000000000000000000000600082015250565b7f55696e74323536206f766572666c6f770000000000000000000000000000000060008201525056fea26469706673582212200eab0c29f029b0c1c9f6e2d3f579c701804ab9fb71c990d2e8020a3e9d17495b64736f6c63430008040033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(overrides || {}) as Promise<Counter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  override connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
